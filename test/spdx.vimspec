Describe spdx
  Describe #complete()
    Before all
      let nlic = 465
      let nexc = 43
    End

    After each
      unlet! b:spdx_license
    End

    It also lists deprecated license identifiers
      Assert LengthOf(license#spdx#complete('', 'License ', 8), nlic)

      let b:spdx_license = ['deprecated']
      Assert LengthOf(license#spdx#complete('', 'License ', 8), nlic + 31)
    End

    It lists only free software license identifiers
      let n = 108
      let b:spdx_license = ['fsf']
      Assert LengthOf(license#spdx#complete('', 'License ', 8), n)

      let b:spdx_license = ['deprecated', 'fsf']
      Assert LengthOf(license#spdx#complete('', 'License ', 8), n + 17)
    End

    It lists only OSI-approved license identifiers
      let n = 127
      let b:spdx_license = ['osi']
      Assert LengthOf(license#spdx#complete('', 'License ', 8), n)

      let b:spdx_license = ['deprecated', 'osi']
      Assert LengthOf(license#spdx#complete('', 'License ', 8), n + 13)
    End

    It lists only free software and OSI-approved license identifiers
      let n = 62
      let b:spdx_license = ['fsf', 'osi']
      Assert LengthOf(license#spdx#complete('', 'License ', 8), n)

      let b:spdx_license = ['deprecated', 'fsf', 'osi']
      Assert LengthOf(license#spdx#complete('', 'License ', 8), n + 9)
    End

    It lists license identifiers for :command
      Assert LengthOf(license#spdx#complete('',    'License ',         8), nlic)
      Assert   Equals(license#spdx#complete('is',  'License is',      10), ['ISC'])
      Assert   Equals(license#spdx#complete('',    'License ISC ',    12), ['AND', 'OR', 'WITH'])
      Assert   Equals(license#spdx#complete('o',   'License ISC o',   13), ['OR'])
      Assert LengthOf(license#spdx#complete('',    'License ISC OR ', 15), nlic)
      Assert   Equals(license#spdx#complete('',    'License ISC OR',  12), ['AND', 'OR', 'WITH'])
      Assert   Equals(license#spdx#complete('ISC', 'License ISC OR',  11), ['ISC'])
      Assert LengthOf(license#spdx#complete('',    'License ISC OR',   8), nlic)
    End

    It lists a license identifier with a license exception for :command
      Assert   Equals(license#spdx#complete('apac', 'License apac',                            12), ['Apache-1.0', 'Apache-1.1', 'Apache-2.0'])
      Assert   Equals(license#spdx#complete('w',    'License Apache-2.0 w',                    20), ['WITH'])
      Assert LengthOf(license#spdx#complete('',     'License Apache-2.0 WITH ',                24), nexc)
      Assert   Equals(license#spdx#complete('ll',   'License Apache-2.0 WITH ll',              26), ['LLVM-exception'])
      Assert   Equals(license#spdx#complete('',     'License Apache-2.0 WITH LLVM-exception ', 39), ['AND', 'OR'])
      Assert   Equals(license#spdx#complete('',     'License Apache-2.0 WITH',                 19), ['AND', 'OR', 'WITH'])
      Assert LengthOf(license#spdx#complete('',     'License Apache-2.0 WITH',                  8), nlic)
    End

    It lists license identifiers that encapsulated by parentheses for :command
      Assert LengthOf(license#spdx#complete('(',     'License (',                     9), nlic)
      Assert   Equals(license#spdx#complete('(apac', 'License (apac',                13), ['(Apache-1.0', '(Apache-1.1', '(Apache-2.0'])
      Assert   Equals(license#spdx#complete('MIT)',  'License (Apache-2.0 OR MIT)',  27), ['MIT)AND', 'MIT)OR', 'MIT)WITH'])
      Assert   Equals(license#spdx#complete('',      'License (Apache-2.0 OR MIT) ', 28), ['AND', 'OR', 'WITH'])
    End

    It lists license identifiers for input()
      Assert LengthOf(license#spdx#complete('',        '',        0), nlic)
      Assert   Equals(license#spdx#complete('is',      'is',      2), ['ISC'])
      Assert   Equals(license#spdx#complete('ISC ',    'ISC ',    4), ['ISC AND', 'ISC OR', 'ISC WITH'])
      Assert   Equals(license#spdx#complete('ISC o',   'ISC o',   5), ['ISC OR'])
      Assert LengthOf(license#spdx#complete('ISC OR ', 'ISC OR ', 7), nlic)
      Assert   Equals(license#spdx#complete('ISC ',    'ISC OR',  4), ['ISC AND', 'ISC OR', 'ISC WITH'])
      Assert   Equals(license#spdx#complete('ISC',     'ISC OR',  3), ['ISC'])
      Assert LengthOf(license#spdx#complete('',        'ISC OR',  0), nlic)
    End

    It lists a license identifier with a license exception for input()
      Assert   Equals(license#spdx#complete('apac',                            'apac',                             4), ['Apache-1.0', 'Apache-1.1', 'Apache-2.0'])
      Assert   Equals(license#spdx#complete('Apache-2.0 w',                    'Apache-2.0 w',                    12), ['Apache-2.0 WITH'])
      Assert LengthOf(license#spdx#complete('Apache-2.0 WITH ',                'Apache-2.0 WITH ',                16), nexc)
      Assert   Equals(license#spdx#complete('Apache-2.0 WITH ll',              'Apache-2.0 WITH ll',              18), ['Apache-2.0 WITH LLVM-exception'])
      Assert   Equals(license#spdx#complete('Apache-2.0 WITH LLVM-exception ', 'Apache-2.0 WITH LLVM-exception ', 31), ['Apache-2.0 WITH LLVM-exception AND', 'Apache-2.0 WITH LLVM-exception OR'])
      Assert   Equals(license#spdx#complete('Apache-2.0 ',                     'Apache-2.0 WITH',                 11), ['Apache-2.0 AND', 'Apache-2.0 OR', 'Apache-2.0 WITH'])
      Assert LengthOf(license#spdx#complete('',                                'Apache-2.0 WITH',                  0), nlic)
    End

    It lists license identifiers that encapsulated by parentheses for input()
      Assert LengthOf(license#spdx#complete('(',                    '(',                     1), nlic)
      Assert   Equals(license#spdx#complete('(apac',                '(apac',                 5), ['(Apache-1.0', '(Apache-1.1', '(Apache-2.0'])
      Assert   Equals(license#spdx#complete('(Apache-2.0 OR MIT)',  '(Apache-2.0 OR MIT)',  19), ['(Apache-2.0 OR MIT)AND', '(Apache-2.0 OR MIT)OR', '(Apache-2.0 OR MIT)WITH'])
      Assert   Equals(license#spdx#complete('(Apache-2.0 OR MIT) ', '(Apache-2.0 OR MIT) ', 20), ['(Apache-2.0 OR MIT) AND', '(Apache-2.0 OR MIT) OR', '(Apache-2.0 OR MIT) WITH'])
    End
  End

  Describe #license()
    Before each
      call setline(1, [1, 2])
    End

    After each
      bwipe!
    End

    It inserts an SPDX ID before the first line
      0 SPDXLicense MIT
      Assert Equals(line('.'), 1)
      Assert Equals(line('$'), 3)

      Assert Equals(getline(1), 'SPDX-License-Identifier: MIT')
      Assert Equals(getline(2), '1')
      Assert Equals(getline(3), '2')
    End

    It inserts an SPDX ID to the current line
      SPDXLicense MIT
      Assert Equals(line('.'), 1)
      Assert Equals(line('$'), 3)

      Assert Equals(getline(1), '1')
      Assert Equals(getline(2), 'SPDX-License-Identifier: MIT')
      Assert Equals(getline(3), '2')
    End

    It inserts an SPDX ID to the current line (filetype=python)
      setfiletype python
      call setline(1, map(getline(1, '$'), '"# " . v:val'))

      SPDXLicense MIT
      Assert Equals(line('.'), 1)
      Assert Equals(line('$'), 3)

      Assert Equals(getline(1), '# 1')
      Assert Equals(getline(2), '# SPDX-License-Identifier: MIT')
      Assert Equals(getline(3), '# 2')
    End

    It inserts an SPDX ID after the last line
      $ SPDXLicense MIT
      Assert Equals(line('.'), 1)
      Assert Equals(line('$'), 3)

      Assert Equals(getline(1), '1')
      Assert Equals(getline(2), '2')
      Assert Equals(getline(3), 'SPDX-License-Identifier: MIT')
    End
  End
End
